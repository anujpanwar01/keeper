@import "../../common-sass/common.styles.scss";

.social-btn {
  @include flex-center(center);
  font-size: 2.4rem;
  border: none;
  height: 5rem;
  width: 5rem;
  border: 0.5px solid $color-box-shadow;

  &:not(:last-child) {
    margin-right: 3rem;
  }

  border-radius: 50%;
  cursor: pointer;

  &:hover {
    border: none;
    background-color: #c7c7c7;
  }
}
.sign-in {
  background-color: #dedcfc59;
  margin-top: 2rem;
  margin-bottom: 4rem;
  @media only screen and (max-width: 550px) {
    width: 80%;
  }
  @media only screen and (max-width: 400px) {
    width: 95%;
  }
  & > * {
    margin-bottom: 2rem;
  }
  h1 {
    font-size: 2.4rem;
  }
  h3,
  h1 {
    font-weight: 500;
  }
  h3 {
    font-size: 1.4rem;
  }
  a {
    color: black;
    font-weight: 500;
    font-size: 1.4rem;
    &:hover {
      text-decoration: underline;
    }
  }
  div {
    display: flex;
  }
  .input-container {
    flex-direction: column;
  }
  .sign-in-form {
    @include flex-column;
    align-items: center;
    & > * {
      margin-bottom: 1.2rem;
    }
    @media only screen and (max-width: 500px) {
      width: 100%;
    }

    input {
      font-size: 1.6rem;
      color: rgb(0, 0, 0);
      width: 40rem;
      padding: 1.6rem;
      border-radius: $common-border-radius;

      border: 1px solid black;
      @media only screen and (max-width: 550px) {
        width: 100%;
      }
    }
  }
  .password {
    border: none;
    background-color: inherit;
    font-size: 1.6rem;
  }
  .reset-pass {
    cursor: not-allowed;
  }
  .rm-reset-pass {
    cursor: pointer;
    &:hover,
    &:active {
      text-decoration: underline;
    }
  }
}
// const notesRef = ref(database, `notes/ ${currentUser?.uid}`);
// console.log(query(notesRef), orderByKey(currentUser?.uid));
// console.log(notesRef);
// let self = this;
// notesRef.on("value", function (snap) {
//   let value = snap.val();
//   self.$store.dispatch("setUserData", value);
// });
// onValue(notesRef, (snapshot) => {
//   setA([]);
//   console.log(snapshot.exists());
//   const { notes } = snapshot.val();

//   if (!notes) return;
//   let transformData = {};
//   Object.values(notes).map((key) => {
//     console.log(key);
//     for (const note in key) {
//       console.log(note, key);
//       // console.log(key[note].subTitle, note);
//       transformData.id = note;
//       transformData.title = key[note].title;
//       transformData.color = key[note].color;
//       transformData.file = key[note].file;
//       transformData.src = key[note].src;
//       transformData.subTitle = key[note].subTitle;

//       //   // const transformData = {
//       //   //   id: note,
//       //   //   title: key[note].data.title,
//       //   //   color: key[note].data.color,
//       //   //   file: key[note].data.file,
//       //   //   src: key[note].data.src,
//       //   //   subTitle: key[note].data.subTitle,
//       //   // };
//       //   // d.push(transformData);
//     }
//     return setA((prev) => [...prev, transformData]);
//     // return d;
//     // console.log(Object.values(key).map((ele) => ele));
//   });
// });
